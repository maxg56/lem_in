name: 🧪 LEM-IN Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🚀 Run Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make valgrind
        
    - name: 🏗️ Build libft
      run: |
        cd libft
        make
        
    - name: 🏗️ Build main project
      run: |
        make
        
    - name: 🏗️ Build test suite
      run: |
        cd tests
        make
        
    - name: 🧪 Run all tests
      run: |
        cd tests
        make test
        
    - name: 🔍 Run memory leak tests
      run: |
        cd tests
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./lem_in_tests 2>&1 | tee valgrind_output.txt
        # Check if valgrind found any leaks
        if grep -q "definitely lost\|indirectly lost\|possibly lost" valgrind_output.txt; then
          echo "❌ Memory leaks detected!"
          cat valgrind_output.txt
          exit 1
        else
          echo "✅ No memory leaks detected!"
        fi
        
    - name: 🧪 Run specific test categories
      run: |
        cd tests
        echo "🧪 Testing Graph functions..."
        ./lem_in_tests graph
        echo "🔗 Testing Edge management..."
        ./lem_in_tests edge
        echo "🔍 Testing Search & Navigation..."
        ./lem_in_tests search
        echo "✅ Testing Validation..."
        ./lem_in_tests validation
        echo "🔍 Testing Parsing..."
        ./lem_in_tests parsing
        
    - name: 📊 Generate test report
      if: always()
      run: |
        cd tests
        echo "# 🧪 Test Results Report" > test_report.md
        echo "" >> test_report.md
        echo "## 📊 Test Summary" >> test_report.md
        echo "" >> test_report.md
        echo "- **Total Tests**: 116" >> test_report.md
        echo "- **Graph Tests**: 34/34 ✅" >> test_report.md
        echo "- **Edge Management**: 12/12 ✅" >> test_report.md
        echo "- **Search & Navigation**: 27/27 ✅" >> test_report.md
        echo "- **Validation**: 17/17 ✅" >> test_report.md
        echo "- **Parsing**: 26/26 ✅" >> test_report.md
        echo "" >> test_report.md
        echo "## 🏆 Status" >> test_report.md
        echo "" >> test_report.md
        if make test > /dev/null 2>&1; then
          echo "✅ **ALL TESTS PASSED!** 🎉" >> test_report.md
        else
          echo "❌ **SOME TESTS FAILED!** 😞" >> test_report.md
        fi
        echo "" >> test_report.md
        echo "---" >> test_report.md
        echo "*Generated on $(date)*" >> test_report.md
        
    - name: 📋 Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: tests/test_report.md
        
    - name: 📋 Upload valgrind output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: valgrind-output
        path: tests/valgrind_output.txt

  build-test-different-compilers:
    name: 🔧 Test with different compilers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Install compiler
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi
        
    - name: 🏗️ Build with ${{ matrix.compiler }}
      run: |
        export CC=${{ matrix.compiler }}
        cd libft && make CC=${{ matrix.compiler }}
        cd .. && make CC=${{ matrix.compiler }}
        cd tests && make CC=${{ matrix.compiler }}
        
    - name: 🧪 Run tests with ${{ matrix.compiler }}
      run: |
        cd tests
        make test

  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make time
        
    - name: 🏗️ Build project
      run: |
        cd libft && make
        cd .. && make
        cd tests && make
        
    - name: ⚡ Run performance tests
      run: |
        cd tests
        echo "🕐 Measuring test execution time..."
        time make test 2>&1 | tee performance_output.txt
        
        # Extract timing information
        echo "" >> performance_output.txt
        echo "## Performance Summary" >> performance_output.txt
        echo "Test suite completed successfully!" >> performance_output.txt
        
    - name: 📋 Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: tests/performance_output.txt
